openapi: 3.0.1
info:
  contact:
    email: brett.smith@isbscience.org
    x-role: responsible developer
  description: SPOKE KP - an NIH NCATS Knowledge Provider to expose UCSF's SPOKE
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: https://spoke.rbvi.ucsf.edu/license.html
  title: SPOKE KP
  version: 1.1.0-beta
  x-translator:
    component: KP
    team:
    - imProving Agent
    biolink-version: 1.8.0
    externalDocs:
      description: Code repository
      url: https://github.com/suihuanglab/spoke-kp
  x-trapi:
    version: 1.1.0-beta
    externalDocs:
      description: NCATS Reasoner API Documentation
      url: https://github.com/NCATSTranslator/ReasonerAPI/blob/master/docs/reference.md
externalDocs:
  description: Documentation for the NCATS Biomedical Translator Reasoners web services
  url: https://github.com/NCATSTranslator/ReasonerAPI
servers:
- description: dev
  url: https://spokekp.healthdatascience.cloud/api/v1.1/
tags:
- description: Get supported relationships by source and target
  name: predicates
- description: Query reasoner using a predefined question type
  externalDocs:
    description: Documentation for the reasoner query function
    url: https://github.com/suihuanglab/spoke-kp
  name: query
- description: NCATS Translator Component
  name: translator
- description: NCATS TRAPI 1.1.x Compliant
  name: trapi
paths:
  /meta_knowledge_graph:
    get:
      operationId: meta_knowledge_graph_get
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetaKnowledgeGraph'
          description: Returns meta knowledge graph representation of this TRAPI web
            service.
      summary: Meta knowledge graph representation of this TRAPI web service.
      tags:
      - meta_knowledge_graph
      x-openapi-router-controller: spoke_kp.controllers.meta_knowledge_graph_controller
  /predicates:
    get:
      deprecated: true
      operationId: predicates_get
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  additionalProperties:
                    description: Array of predicates
                    items:
                      type: string
                    type: array
                  description: Target map
                  type: object
                description: Source map
                example:
                  biolink:ChemicalSubstance:
                    biolink:Gene:
                    - biolink:directly_interacts_with
                    - biolink:decreases_activity_of
                type: object
          description: Predicates by source and target
      summary: Get supported relationships by source and target
      tags:
      - predicates
      x-openapi-router-controller: spoke_kp.controllers.predicates_controller
  /query:
    post:
      operationId: query_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Query'
        description: Query information to be submitted
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
          description: OK. There may or may not be results. Note that some of the
            provided identifiers may not have been recognized.
        "400":
          content:
            application/json:
              schema:
                type: string
          description: Bad request. The request is invalid according to this OpenAPI
            schema OR a specific identifier is believed to be invalid somehow (not
            just unrecognized).
        "500":
          content:
            application/json:
              schema:
                type: string
          description: Internal server error.
        "501":
          content:
            application/json:
              schema:
                type: string
          description: Not implemented.
      summary: Query reasoner via one of several inputs
      tags:
      - query
      x-openapi-router-controller: spoke_kp.controllers.query_controller
components:
  schemas:
    Query:
      additionalProperties: true
      description: The Query class is used to package a user request for information.
        A Query object consists of a required Message object with optional additional
        properties. Additional properties are intended to convey implementation-specific
        or query-independent parameters. For example, an additional property specifying
        a log level could allow a user to override the default log level in order
        to receive more fine-grained log information when debugging an issue.
      properties:
        message:
          $ref: '#/components/schemas/Message'
        log_level:
          allOf:
          - $ref: '#/components/schemas/LogLevel'
          description: The least critical level of logs to return
          nullable: true
        max_results:
          default: 200
          description: The maximum number of results to return. Currently, this is
            hardcoded to 200 in the imProving Agent internals, but you can request
            fewer results for testing. The maximum number internally will certainly
            increase going forward.
          type: integer
      required:
      - message
      type: object
      x-body-name: request_body
    Response:
      additionalProperties: true
      description: The Response object contains the main payload when a TRAPI query
        endpoint interprets and responds to the submitted query successfully (i.e.,
        HTTP Status Code 200). The message property contains the knowledge of the
        response (query graph, knowledge graph, and results). The status, description,
        and logs properties provide additional details about the response.
      example:
        description: Success. 42 results found.
        message:
          knowledge_graph: ""
          results:
          - score: 1.234
            edge_bindings:
              key:
              - id: id
              - id: id
            node_bindings:
              key:
              - id: id
              - id: id
          - score: 1.234
            edge_bindings:
              key:
              - id: id
              - id: id
            node_bindings:
              key:
              - id: id
              - id: id
          query_graph: ""
        logs:
        - code: code
          level: ""
          message: message
          timestamp: 2020-09-03T18:13:49Z
        - code: code
          level: ""
          message: message
          timestamp: 2020-09-03T18:13:49Z
        status: Success
      properties:
        message:
          $ref: '#/components/schemas/Message'
        status:
          description: One of a standardized set of short codes, e.g. Success, QueryNotTraversable,
            KPsNotAvailable
          example: Success
          nullable: true
          type: string
        description:
          description: A brief human-readable description of the outcome
          example: Success. 42 results found.
          nullable: true
          type: string
        logs:
          description: Log entries containing errors, warnings, debugging information,
            etc
          items:
            $ref: '#/components/schemas/LogEntry'
          nullable: true
          type: array
      required:
      - message
      type: object
    Message:
      additionalProperties: false
      description: 'The message object holds the main content of a Query or a Response
        in three properties: query_graph, results, and knowledge_graph. The query_graph
        property contains the query configuration, the results property contains any
        answers that are returned by the service, and knowledge_graph property contains
        lists of edges and nodes in the thought graph corresponding to this message.
        The content of these properties is context-dependent to the encompassing object
        and the TRAPI operation requested.'
      example:
        knowledge_graph: ""
        results:
        - score: 1.234
          edge_bindings:
            key:
            - id: id
            - id: id
          node_bindings:
            key:
            - id: id
            - id: id
        - score: 1.234
          edge_bindings:
            key:
            - id: id
            - id: id
          node_bindings:
            key:
            - id: id
            - id: id
        query_graph: ""
      properties:
        results:
          description: List of all returned Result objects for the query posed
          items:
            $ref: '#/components/schemas/Result'
          nullable: true
          type: array
        query_graph:
          allOf:
          - $ref: '#/components/schemas/QueryGraph'
          description: QueryGraph object that contains a serialization of a query
            in the form of a graph
          nullable: true
        knowledge_graph:
          allOf:
          - $ref: '#/components/schemas/KnowledgeGraph'
          description: KnowledgeGraph object that contains lists of nodes and edges
            in the thought graph corresponding to the message
          nullable: true
      type: object
    LogEntry:
      additionalProperties: true
      description: The LogEntry object contains information useful for tracing and
        debugging across Translator components.  Although an individual component
        (for example, an ARA or KP) may have its own logging and debugging infrastructure,
        this internal information is not, in general, available to other components.
        In addition to a timestamp and logging level, LogEntry includes a string intended
        to be read by a human, along with one of a standardized set of codes describing
        the condition of the component sending the message.
      example:
        code: code
        level: ""
        message: message
        timestamp: 2020-09-03T18:13:49Z
      properties:
        timestamp:
          description: Timestamp in ISO 8601 format
          example: 2020-09-03T18:13:49Z
          format: date-time
          nullable: true
          type: string
        level:
          allOf:
          - $ref: '#/components/schemas/LogLevel'
          nullable: true
        code:
          description: One of a standardized set of short codes e.g. QueryNotTraversable,
            KPNotAvailable, KPResponseMalformed
          nullable: true
          type: string
        message:
          description: A human-readable log message
          nullable: true
          type: string
      type: object
    LogLevel:
      description: Logging level
      enum:
      - ERROR
      - WARNING
      - INFO
      - DEBUG
      type: string
    Result:
      additionalProperties: true
      description: A Result object specifies the nodes and edges in the knowledge
        graph that satisfy the structure or conditions of a user-submitted query graph.
        It must contain a NodeBindings object (list of query graph node to knowledge
        graph node mappings) and an EdgeBindings object (list of query graph edge
        to knowledge graph edge mappings).
      example:
        score: 1.234
        edge_bindings:
          key:
          - id: id
          - id: id
        node_bindings:
          key:
          - id: id
          - id: id
      properties:
        node_bindings:
          additionalProperties:
            items:
              $ref: '#/components/schemas/NodeBinding'
            type: array
          description: The dictionary of Input Query Graph to Result Knowledge Graph
            node bindings where the dictionary keys are the key identifiers of the
            Query Graph nodes and the associated values of those keys are instances
            of NodeBinding schema type (see below). This value is an array of NodeBindings
            since a given query node may have multiple knowledge graph Node bindings
            in the result.
          type: object
        edge_bindings:
          additionalProperties:
            items:
              $ref: '#/components/schemas/EdgeBinding'
            type: array
          description: The dictionary of Input Query Graph to Result Knowledge Graph
            edge bindings where the dictionary keys are the key identifiers of the
            Query Graph edges and the associated values of those keys are instances
            of EdgeBinding schema type (see below). This value is an array of EdgeBindings
            since a given query edge may resolve to multiple knowledge graph edges
            in the result.
          type: object
        score:
          description: The 'imProving Agent Score' that is the sum of the various
            scores calculated from PSEVs, KP metadata, etc. Individual scores should
            be visible as attributes on Nodes and Edges
          example: 1.234
          format: float
          type: number
      required:
      - edge_bindings
      - node_bindings
      type: object
    NodeBinding:
      additionalProperties: true
      example:
        id: id
      properties:
        id:
          description: A Compact URI, consisting of a prefix and a reference separated
            by a colon, such as UniProtKB:P00738. Via an external context definition,
            the CURIE prefix and colon may be replaced by a URI prefix, such as http://identifiers.org/uniprot/,
            to form a full URI.
          externalDocs:
            url: https://www.w3.org/TR/2010/NOTE-curie-20101216/
          type: string
      required:
      - id
      type: object
    EdgeBinding:
      additionalProperties: true
      description: A instance of EdgeBinding is a single KnowledgeGraph Edge mapping,
        identified by the corresponding 'id' object key identifier of the Edge within
        the Knowledge Graph. Instances of EdgeBinding may include extra annotation
        (such annotation is not yet fully standardized).
      example:
        id: id
      properties:
        id:
          description: The key identifier of a specific KnowledgeGraph Edge.
          type: string
      required:
      - id
      type: object
    KnowledgeGraph:
      additionalProperties: true
      description: The knowledge graph associated with a set of results. The instances
        of Node and Edge defining this graph represent instances of biolink:NamedThing
        (concept nodes) and biolink:Association (relationship edges) representing
        (Attribute) annotated knowledge returned from the knowledge sources and inference
        agents wrapped by the given TRAPI implementation.
      properties:
        nodes:
          additionalProperties:
            $ref: '#/components/schemas/Node'
          description: Dictionary of Node instances used in the KnowledgeGraph, referenced
            elsewhere in the TRAPI output by the dictionary key.
          type: object
        edges:
          additionalProperties:
            $ref: '#/components/schemas/Edge'
          description: Dictionary of Edge instances used in the KnowledgeGraph, referenced
            elsewhere in the TRAPI output by the dictionary key.
          type: object
      required:
      - edges
      - nodes
      type: object
    QueryGraph:
      additionalProperties: true
      description: A graph representing a biomedical question. It serves as a template
        for each result (answer), where each bound knowledge graph node/edge is expected
        to obey the constraints of the associated query graph element.
      properties:
        nodes:
          additionalProperties:
            $ref: '#/components/schemas/QNode'
          description: The node specifications. The keys of this map are unique node
            identifiers and the corresponding values include the constraints on bound
            nodes.
          type: object
        edges:
          additionalProperties:
            $ref: '#/components/schemas/QEdge'
          description: The edge specifications. The keys of this map are unique edge
            identifiers and the corresponding values include the constraints on bound
            edges, in addition to specifying the subject and object QNodes.
          type: object
      required:
      - edges
      - nodes
      type: object
    QNode:
      additionalProperties: true
      description: A node in the QueryGraph used to represent an entity in a query.
        If a CURIE is not specified, any nodes matching the category of the QNode
        will be returned in the Results.
      properties:
        ids:
          description: CURIE identifier for this node
          example:
          - OMIM:603903
          items:
            $ref: '#/components/schemas/CURIE'
          minItems: 1
          nullable: true
          type: array
        categories:
          items:
            $ref: '#/components/schemas/BiolinkEntity'
          minItems: 1
          nullable: true
          type: array
        is_set:
          default: false
          description: Boolean that if set to true, indicates that this QNode MAY
            have multiple KnowledgeGraph Nodes bound to it within each Result. The
            nodes in a set should be considered as a set of independent nodes, rather
            than a set of dependent nodes, i.e., the answer would still be valid if
            the nodes in the set were instead returned individually. Multiple QNodes
            may have is_set=True. If a QNode (n1) with is_set=True is connected to
            a QNode (n2) with is_set=False, each n1 must be connected to n2. If a
            QNode (n1) with is_set=True is connected to a QNode (n2) with is_set=True,
            each n1 must be connected to at least one n2.
          type: boolean
        constraints:
          description: A list of contraints applied to a query node. If there are
            multiple items, they must all be true (equivalent to AND)
          items:
            $ref: '#/components/schemas/QueryConstraint'
          nullable: true
          type: array
      type: object
    QEdge:
      additionalProperties: true
      description: An edge in the QueryGraph used as an filter pattern specification
        in a query. If optional predicate or relation properties are not specified,
        they are assumed to be wildcard matches to the target knowledge space. If
        specified, the ontological inheritance hierarchy associated with the terms
        provided is assumed, such that edge bindings returned may be an exact match
        to the given QEdge predicate or relation term ('class'), or to a term which
        is a subclass of the QEdge specified term.
      properties:
        predicates:
          items:
            $ref: '#/components/schemas/BiolinkPredicate'
          minItems: 1
          nullable: true
          type: array
        relation:
          description: Query constraint against the relationship type term of this
            edge, as originally specified by, or curated by inference from, the original
            external source of knowledge. Note that this should often be specified
            as predicate ontology term CURIE, although this may not be strictly enforced.
          example: RO:0002447
          nullable: true
          type: string
        subject:
          description: Corresponds to the map key identifier of the subject concept
            node anchoring the query filter pattern for the query relationship edge.
          example: https://omim.org/entry/603903
          type: string
        object:
          description: Corresponds to the map key identifier of the object concept
            node anchoring the query filter pattern for the query relationship edge.
          example: https://www.uniprot.org/uniprot/P00738
          type: string
        constraints:
          description: A list of contraints applied to a query edge. If there are
            multiple items, they must all be true (equivalent to AND)
          items:
            $ref: '#/components/schemas/QueryConstraint'
          nullable: true
          type: array
      required:
      - object
      - subject
      type: object
    Node:
      additionalProperties: false
      description: A node in the KnowledgeGraph which represents some biomedical concept.
        Nodes are identified by the keys in the KnowledgeGraph Node mapping.
      properties:
        name:
          description: Formal name of the entity
          example: Haptoglobin
          nullable: true
          type: string
        categories:
          items:
            $ref: '#/components/schemas/BiolinkEntity'
          nullable: true
          type: array
        attributes:
          description: A list of attributes describing the node
          items:
            $ref: '#/components/schemas/Attribute'
          nullable: true
          type: array
      type: object
    Attribute:
      additionalProperties: false
      description: Generic attribute for a node or an edge that expands the key-value
        pair concept by including fields for additional metadata. These fields can
        be used to describe the source of the statement made in key-value pair of
        the attribute object, or describe the attribute's value itself including its
        semantic type, or a url providing additional information about it.
      properties:
        attribute_type_id:
          description: A Compact URI, consisting of a prefix and a reference separated
            by a colon, such as UniProtKB:P00738. Via an external context definition,
            the CURIE prefix and colon may be replaced by a URI prefix, such as http://identifiers.org/uniprot/,
            to form a full URI.
          externalDocs:
            url: https://www.w3.org/TR/2010/NOTE-curie-20101216/
          type: string
        original_attribute_name:
          description: The term used by the original source of an attribute to describe
            the meaning or significance of the value it captures. This may be a column
            name in a source tsv file, or a key in a source json document for the
            field in the data that held the attribute's value. Capturing this information  where
            possible lets us preserve what the original source said. Note that the
            data type is string' but the contents of the field could also be a CURIE
            of a third party ontology term.
          example: p-value
          nullable: true
          type: string
        value:
          description: Value of the attribute. May be any data type, including a list.
          example: 0.000153
        value_type_id:
          description: A Compact URI, consisting of a prefix and a reference separated
            by a colon, such as UniProtKB:P00738. Via an external context definition,
            the CURIE prefix and colon may be replaced by a URI prefix, such as http://identifiers.org/uniprot/,
            to form a full URI.
          externalDocs:
            url: https://www.w3.org/TR/2010/NOTE-curie-20101216/
          type: string
        attribute_source:
          description: The source of the core assertion made by the key-value pair
            of an attribute object. Use a CURIE or namespace designator for this resource
            where possible.
          example: UniProtKB
          nullable: true
          type: string
        value_url:
          description: Human-consumable URL linking to a web document that provides
            additional information about an  attribute's value (not the node or the
            edge fom which it hangs).
          example: https://pubmed.ncbi.nlm.nih.gov/32529952
          nullable: true
          type: string
        description:
          description: Human-readable description for the attribute and its value.
          example: Assertion Authored By Dr. Trans L. Ator
          nullable: true
          type: string
      required:
      - attribute_type_id
      - value
      type: object
    Edge:
      additionalProperties: false
      description: A specification of the semantic relationship linking two concepts
        that are expressed as nodes in the knowledge "thought" graph resulting from
        a query upon the underlying knowledge source.
      properties:
        predicate:
          allOf:
          - $ref: '#/components/schemas/BiolinkPredicate'
          nullable: true
        relation:
          description: The relationship type term of this edge, originally specified
            by, or curated by inference from, the original source of knowledge. This
            should generally be specified as predicate ontology CURIE.
          example: RO:0002447
          nullable: true
          type: string
        subject:
          description: A Compact URI, consisting of a prefix and a reference separated
            by a colon, such as UniProtKB:P00738. Via an external context definition,
            the CURIE prefix and colon may be replaced by a URI prefix, such as http://identifiers.org/uniprot/,
            to form a full URI.
          externalDocs:
            url: https://www.w3.org/TR/2010/NOTE-curie-20101216/
          type: string
        object:
          description: A Compact URI, consisting of a prefix and a reference separated
            by a colon, such as UniProtKB:P00738. Via an external context definition,
            the CURIE prefix and colon may be replaced by a URI prefix, such as http://identifiers.org/uniprot/,
            to form a full URI.
          externalDocs:
            url: https://www.w3.org/TR/2010/NOTE-curie-20101216/
          type: string
        attributes:
          description: A list of additional attributes for this edge
          items:
            $ref: '#/components/schemas/Attribute'
          nullable: true
          type: array
      required:
      - object
      - subject
      type: object
    BiolinkEntity:
      description: Compact URI (CURIE) for a Biolink class, biolink:NamedThing or
        a child thereof. The CURIE must use the prefix 'biolink:' followed by the
        PascalCase class name.
      example: biolink:PhenotypicFeature
      externalDocs:
        description: Biolink model entities
        url: https://biolink.github.io/biolink-model/docs/NamedThing.html
      pattern: ^biolink:[A-Z][a-zA-Z]*$
      type: string
    BiolinkPredicate:
      description: CURIE for a Biolink 'predicate' slot, taken from the Biolink slot
        ('is_a') hierarchy rooted in biolink:related_to (snake_case). This predicate
        defines the Biolink relationship between the subject and object nodes of a
        biolink:Association defining a knowledge graph edge.
      example: biolink:interacts_with
      externalDocs:
        description: Biolink model predicates
        url: https://biolink.github.io/biolink-model/docs/related_to.html
      pattern: ^biolink:[a-z][a-z_]*$
      type: string
    CURIE:
      description: A Compact URI, consisting of a prefix and a reference separated
        by a colon, such as UniProtKB:P00738. Via an external context definition,
        the CURIE prefix and colon may be replaced by a URI prefix, such as http://identifiers.org/uniprot/,
        to form a full URI.
      externalDocs:
        url: https://www.w3.org/TR/2010/NOTE-curie-20101216/
      type: string
    MetaKnowledgeGraph:
      description: Knowledge-map representation of this TRAPI web service.
      example:
        nodes:
          key:
            id_prefixes:
            - CHEMBL.COMPOUND
            - INCHIKEY
        edges:
        - predicate: biolink:interacts_with
          subject: biolink:PhenotypicFeature
          relations:
          - inhibits
          - activates
          object: biolink:PhenotypicFeature
        - predicate: biolink:interacts_with
          subject: biolink:PhenotypicFeature
          relations:
          - inhibits
          - activates
          object: biolink:PhenotypicFeature
      properties:
        nodes:
          additionalProperties:
            $ref: '#/components/schemas/MetaNode'
          description: Collection of node categories provided by this TRAPI web service,
            indexed by Biolink class CURIEs.
          type: object
        edges:
          description: List of edges/predicates provided by this TRAPI web service.
          items:
            $ref: '#/components/schemas/MetaEdge'
          minItems: 1
          type: array
      type: object
    MetaNode:
      additionalProperties: false
      description: Description of a node category provided by this TRAPI web service.
      example:
        id_prefixes:
        - CHEMBL.COMPOUND
        - INCHIKEY
      properties:
        id_prefixes:
          description: List of CURIE prefixes for the node category that this TRAPI
            web service understands and accepts on the input.
          example:
          - CHEMBL.COMPOUND
          - INCHIKEY
          items:
            type: string
          minItems: 1
          type: array
      required:
      - id_prefixes
      type: object
    MetaEdge:
      additionalProperties: false
      description: Edge in a meta knowledge map describing relationship between a
        subject Biolink class and an object Biolink class.
      example:
        predicate: biolink:interacts_with
        subject: biolink:PhenotypicFeature
        relations:
        - inhibits
        - activates
        object: biolink:PhenotypicFeature
      properties:
        subject:
          description: Compact URI (CURIE) for a Biolink class, biolink:NamedThing
            or a child thereof. The CURIE must use the prefix 'biolink:' followed
            by the PascalCase class name.
          example: biolink:PhenotypicFeature
          externalDocs:
            description: Biolink model entities
            url: https://biolink.github.io/biolink-model/docs/NamedThing.html
          pattern: ^biolink:[A-Z][a-zA-Z]*$
          type: string
        predicate:
          description: CURIE for a Biolink 'predicate' slot, taken from the Biolink
            slot ('is_a') hierarchy rooted in biolink:related_to (snake_case). This
            predicate defines the Biolink relationship between the subject and object
            nodes of a biolink:Association defining a knowledge graph edge.
          example: biolink:interacts_with
          externalDocs:
            description: Biolink model predicates
            url: https://biolink.github.io/biolink-model/docs/related_to.html
          pattern: ^biolink:[a-z][a-z_]*$
          type: string
        object:
          description: Compact URI (CURIE) for a Biolink class, biolink:NamedThing
            or a child thereof. The CURIE must use the prefix 'biolink:' followed
            by the PascalCase class name.
          example: biolink:PhenotypicFeature
          externalDocs:
            description: Biolink model entities
            url: https://biolink.github.io/biolink-model/docs/NamedThing.html
          pattern: ^biolink:[A-Z][a-zA-Z]*$
          type: string
        relations:
          description: Low-level relations from the underlying source.
          example:
          - inhibits
          - activates
          items:
            type: string
          type: array
      required:
      - object
      - predicate
      - subject
      type: object
    QueryConstraint:
      additionalProperties: false
      description: Generic query constraint for a query node or query edge
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/CURIE'
          description: CURIE of the concept being constrained. For properties defined
            by the Biolink model this SHOULD be a biolink CURIE. otherwise, if possible,
            from the EDAM ontology. If a suitable CURIE does not exist, enter a descriptive
            phrase here and submit the new type for consideration by the appropriate
            authority.
          example: EDAM:data_0844
          nullable: false
        name:
          description: Human-readable name or label for the constraint concept. If
            appropriate, it SHOULD be the term name of the CURIE used as the 'id'.
            This is redundant but required for human readability.
          example: molecular mass
          nullable: false
          type: string
        not:
          default: false
          type: boolean
        operator:
          default: ==
          description: Relationship between the database value and the constraint
            value for the specified id. The operators ==, >, and < mean is exactly
            equal to, is greater than, and is less than, respectively. The 'matches'
            operator indicates that the value is a regular expression to be evaluated.
            If value is a list type, then at least one evaluation must be true (equivalent
            to OR). This means that the == operator with a list acts like a SQL 'IN'
            clause. The 'not' property negates the operator such that not and == means
            'not equal to' (or 'not in' for a list), and not > means <=, and not <
            means >=, and not matches means does not match. The '==' operator SHOULD
            NOT be used in a manner that describes an "is a" subclass relationship
            for the parent QNode.
          enum:
          - ==
          - '>'
          - <
          - matches
          type: string
        value:
          description: Value of the attribute. May be any data type, including a list.
            If the value is a list and there are multiple items, at least one comparison
            must be true (equivalent to OR). If 'value' is of data type 'object',
            the keys of the object MAY be treated as a list. A 'list' data type paired
            with the '>' or '<' operators will encode extraneous comparisons, but
            this is permitted as it is in SQL and other languages.
          example: 57.0
        unit_id:
          description: CURIE of the units of the value or list of values in the 'value'
            property. The Units of Measurement Ontology (UO) should be used if possible.
            The unit_id MUST be provided for (lists of) numerical values that correspond
            to a quantity that has units.
          example: UO:0000222
        unit_name:
          description: Term name that is associated with the CURIE of the units of
            the value or list of values in the 'value' property. The Units of Measurement
            Ontology (UO) SHOULD be used if possible. This property SHOULD be provided
            if a unit_id is provided. This is redundant but recommended for human
            readability.
          example: kilodalton
      required:
      - id
      - name
      - operator
      - value
      type: object
